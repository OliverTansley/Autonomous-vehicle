import math
import sys
import pygame

class Node:

    def __init__(self, xpos, ypos) -> None:
        self.x = xpos
        self.y = ypos
        self.neighbors:list[Node] = []
        self.marked = False
    
    def addNeighbor(self,Node) -> None:
        self.neighbors.append(Node)


    def removeNeighbor(randomPos) -> None:
        pass


class Tree:


    def __init__(self,xpos,ypos) -> None:
        self.root = Node(xpos,ypos)
        self.nodes = [self.root]


    def getClosestNode(self,randomNode)-> Node:
        '''returns the closest node to a coordinate'''
        closestNode = self.nodes[0]
        for node in self.nodes:
            if math.sqrt((node.x - randomNode[0])**2 + (node.y - randomNode[1])**2) < math.sqrt((closestNode.x - randomNode[0])**2 + (closestNode.y - randomNode[1])**2):
                closestNode = node
        return closestNode


    def addNode(self,attatchNode,NewNode):
        '''adds a node to another given node attatching it to the tree'''
        attatchNode.addNeighbor(NewNode)
        self.nodes.append(NewNode)


    # Helper Function

    def showTree(self):
        '''Helper function displays the tree generated by the algorithm for debugging purposes'''
        pygame.init()
        size = width, height = 4*320, 4*240
        
        white = (255, 255, 255)

        screen = pygame.display.set_mode(size)

        while True:
            for event in pygame.event.get():
                if event.type == pygame.QUIT: sys.exit()
            screen.fill(white)

            pygame.draw.circle(screen,(0,255,0),(0,0),50)

            for node in self.nodes:
                pygame.draw.circle(screen,(0,0,255),(node.x,node.y),3)
                for neighbor in node.neighbors:
                    pygame.draw.line(screen,(0,0,0),(node.x,node.y),(neighbor.x,neighbor.y))
            
            
            pygame.display.flip()
 